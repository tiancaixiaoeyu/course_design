/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/

// 绑定动画
import { Html, useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAtom } from "jotai";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { SkeletonUtils } from "three-stdlib";
import { useGrid } from "../hooks/useGrid";
import { useSelector } from "react-redux";
import { userAtom } from "./SocketManager";
import { motion } from "framer-motion-3d";
// import { userRoleAtom } from "./UI";


import { useContext } from "react";
//import UserRoleContext from "./UserRoleContext";
//import { charactersAtom } from "./SocketManager";

const MOVEMENT_SPEED = 4;
//const [userRole, setUserRole] = useState('student');
//const userRole = "student";
//const [characters] = useAtom(charactersAtom);

export function Avatar({  // id,
  // Role,
  // Name,

  avatarUrl = "https://models.readyplayer.me/64f0265b1db75f90dcfd9e2c.glb",
//avatarUrl = "https://models.readyplayer.me/6575b1a3b21c8b3e80ba1a83.glb",
  characters,
  ...props}
) {
  //const { userRole, userName } = useContext(UserRoleContext);

  //setUserRole('student');
  const socket = useSelector((state) => state.socket);
  const [chatMessage, setChatMessage] = useState("");
  const position = useMemo(() => props.position, []);

  const avatar = useRef(); // 创建引用
  const [path, setPath] = useState();
  const { gridToVector3 } = useGrid();

  const group = useRef();
  const { scene } = useGLTF(avatarUrl,{
    onError: (error) => {
      console.error('Model loading failed:', error);
      avatarUrl = "https://models.readyplayer.me/6575b1a3b21c8b3e80ba1a83.glb";
      // 可以在这里设置一个后备模型
    }
  });
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone);

  // hook返回动画
  const { animations: walkAnimation } = useGLTF("/animations/M_Walk_001.glb");
  const { animations: danceAnimation } = useGLTF(
    "/animations/F_Talking_Variations_001.glb"
  );
  const { animations: idleAnimation } = useGLTF(
    "/animations/M_Standing_Idle_001.glb"
  );

  // 将动画操作应用于avatar对象
  const { actions } = useAnimations(
    [walkAnimation[0], idleAnimation[0], danceAnimation[0]],
    avatar
  );

  // 状态变量 状态更新函数
  const [animation, setAnimation] = useState("M_Standing_Idle_001");
  const [isDancing, setIsDancing] = useState(false);
  const [init, setInit] = useState(false);
  const [showChatBubble, setShowChatBubble] = useState(false);

  // 实现人物阴影
  useEffect(() => {
    clone.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });
  }, [clone]);

  useEffect(() => {
    actions[animation]
      .reset()
      .fadeIn(init ? 0.32 : 0)
      .play();
    setInit(true);
    return () => actions[animation]?.fadeOut(0.32); // 退出当前动画
  }, [animation, avatarUrl]);

  useEffect(() => {
    function onPlayerDance(value) {
      if (value.id === id) {
        setIsDancing(true);
      }
    }
    function onPlayerMove(value) {
      if (value.id === id) {
        const path = [];
        value.path?.forEach((gridPosition) => {
          path.push(gridToVector3(gridPosition));
        });
        setPath(path);
      }
    }

    // 聊天功能的实现
    let chatMessageBubbleTimeout;
    function onPlayerChatMessage(value) {
      if (value.id === id) {
        setChatMessage(value.message);
        clearTimeout(chatMessageBubbleTimeout);
        setShowChatBubble(true);
        chatMessageBubbleTimeout = setTimeout(() => {
          setShowChatBubble(false);
        }, 3500); // 3.5s后消息才消失
      }
    }

    socket.on("playerMove", onPlayerMove);
    socket.on("playerDance", onPlayerDance);
    socket.on("playerChatMessage", onPlayerChatMessage);
    return () => {
      socket.off("playerDance", onPlayerDance);
      socket.off("playerMove", onPlayerMove);
      socket.off("playerChatMessage", onPlayerChatMessage);
    };
  }, [characters?.id]);

  const [user] = useAtom(userAtom);

  useFrame((_state, delta) => {
    const hips = avatar.current.getObjectByName("Hips"); // 设置Hips只上下移动
    hips.position.set(0, hips.position.y, 0);

    if (path?.length && group.current.position.distanceTo(path[0]) > 0.1) {
      const direction = group.current.position
        .clone()
        .sub(path[0])
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED * delta); // 设置速度和帧速率匹配
      group.current.position.sub(direction);
      group.current.lookAt(path[0]); //面向要去的地方
      setAnimation("M_Walk_001");
      setIsDancing(false);
    } else if (path?.length) {
      path.shift();
    } else {
      if (isDancing) {
        //setAnimation("M_Dances_011");
        setAnimation("F_Talking_Variations_001");
      } else {
        setAnimation("M_Standing_Idle_001");
      }
    }
  });

  return (
    <group
      ref={group}
      {...props}
      position={position}
      dispose={null}
      name={`character-${cd}`}
    >
      {/* <select onChange={e => setUserRole(e.target.value)}>
   <option value="">请选择角色...</option>
   <option value="student">团员</option>
   <option value="teacher">老师</option>
   </select> */}
      {/* 人物昵称标签 */}
      <Html position-y={2.2}>
        <div className="w-20 text-white text-center p-3 px-6 -translate-x-1/2">
          <p className="absolute text-small">
            {characters?.role} {characters?.name}
          </p>
        </div>
      </Html>

      {/* // 默认为学生，也可以是 'teacher' */}
      {/* 人物昵称标签 */}
      {/* <Html position-y={2.2}>
  <div className="w-20 text-white text-center p-3 px-6 -translate-x-1/2">
    <p className="absolute text-small">
      {userRole === 'teacher' ? 'Teacher' : 'Student'}  
    </p>
  </div>
</Html>
      */}

      {/*聊天框*/}
      <Html position-y={2}>
        <div className="w-60 max-w-full">
          <p
            className={`absolute max-w-full text-center break-words -translate-y-full p-2 px-4 -translate-x-1/2 rounded-lg bg-white bg-opacity-40 backdrop-blur-sm text-black transition-opacity duration-500 ${
              showChatBubble ? "" : "opacity-0"
            }`}
          >
            {chatMessage}
          </p>
        </div>
      </Html>

      <motion.group
        initial={{
          // 动画初始状态
          y: 3,
          rotateY: Math.PI * 4,
          scale: 0,
        }}
        animate={{
          // 动画目标状态
          y: 0,
          rotateY: 0,
          scale: 1,
        }}
        transition={{
          // 过渡效果
          delay: 0.8,
          mass: 5, // 动画质量
          stiffness: 200, // 硬度
          damping: 42, // 动画的震荡
        }}
      >
        <primitive object={clone} ref={avatar} />
      </motion.group>
    </group>
  );
}
useGLTF.preload(
  localStorage.getItem("avatarURL") ||
    // "https://models.readyplayer.me/64f0265b1db75f90dcfd9e2c.glb?meshlod=1&quality=medium"  // 设置画质中等
    "https://models.readyplayer.me/6575b1a3b21c8b3e80ba1a83.glb?meshlod=1&quality=medium"
);

useGLTF.preload("/animations/M_Walk_001.glb");
useGLTF.preload("/animations/M_Standing_Idle_001.glb");
useGLTF.preload("/animations/M_Dances_011.glb");
useGLTF.preload("/animations/M_Standing_Expressions_001.glb");
export default Avatar;