{
  "version": 3,
  "sources": ["../../@readyplayerme/react-avatar-creator/dist/index.esm.js"],
  "sourcesContent": ["import React, { useMemo, useRef, useEffect } from 'react';\n\n/**\n * Tries to parse the JSON data, and returns undefined if parsing fails.\n * @param jsonString The string to be parsed.\n * @returns The parsed JSON data or undefined if the data is not valid JSON.\n */\nconst JSONTryParse = (jsonString) => {\n    try {\n        return JSON.parse(jsonString);\n    }\n    catch (error) {\n        return undefined;\n    }\n};\n\nconst useAvatarCreatorUrl = (subdomain, config) => {\n    return useMemo(() => {\n        let url = `https://${subdomain || `demo`}.readyplayer.me`;\n        if (config?.language)\n            url += `/${config.language}`;\n        url += `/avatar?frameApi`;\n        if (config?.clearCache)\n            url += '&clearCache';\n        if (config?.quickStart)\n            url += '&quickStart';\n        if (config?.bodyType)\n            url += `&bodyType=${config?.bodyType}`;\n        return url;\n    }, [subdomain, config]);\n};\n\nconst MESSAGE_EVENT = 'message';\nconst RPM_TARGET = 'readyplayerme';\nconst IFRAME_READY_EVENT = 'v1.frame.ready';\n/**\n * AvatarCreatorRaw is a React component that allows you to create an avatar using Ready Player Me and receive avatar URL. It exposes the raw events in one callback to allow you to write more custom logic around the event handling.\n * @param subdomain The subdomain of your Ready Player Me instance.\n * @param className The css classes to apply to this iframe.\n * @param style The css styles to apply to this iframe.\n * @param avatarCreatorConfig The configuration for the AvatarCreator component.\n * @param onEventReceived A callback that is called when an avatar creator event is received.\n * @returns A React component.\n */\nconst AvatarCreatorRaw = ({ subdomain, className, style, config, onEventReceived }) => {\n    const frameRef = useRef(null);\n    const url = useAvatarCreatorUrl(subdomain, config);\n    const subscribeToAvatarCreatorEvents = () => {\n        if (!frameRef.current?.contentWindow)\n            return;\n        frameRef.current?.contentWindow?.postMessage(JSON.stringify({\n            target: RPM_TARGET,\n            type: 'subscribe',\n            eventName: 'v1.**',\n        }), '*');\n    };\n    const subscribe = (event) => {\n        const avatarCreatorEvent = JSONTryParse(event.data);\n        if (avatarCreatorEvent?.source !== RPM_TARGET)\n            return;\n        if (avatarCreatorEvent?.eventName === IFRAME_READY_EVENT) {\n            subscribeToAvatarCreatorEvents();\n            return;\n        }\n        onEventReceived?.(avatarCreatorEvent);\n    };\n    useEffect(() => {\n        window.addEventListener(MESSAGE_EVENT, subscribe);\n        return () => {\n            window.removeEventListener(MESSAGE_EVENT, subscribe);\n        };\n    }, []);\n    return React.createElement(\"iframe\", { title: \"Ready Player Me\", ref: frameRef, src: url, style: style, className: className, allow: \"camera *; clipboard-write\" });\n};\n\n/**\n * AvatarCreator is a React component that allows you to create an avatar using Ready Player Me and receive avatar URL. It wraps AvatarCreatorRaw to provide more type safety, and to provide explicit callbacks per event type.\n * @param subdomain The subdomain of your Ready Player Me instance.\n * @param className The css classes to apply to this iframe.\n * @param style The css styles to apply to this iframe.\n * @param config The configuration for the AvatarCreator component.\n * @param onUserSet A callback that is called when a user is set.\n * @param onAvatarExported A callback that is called when an avatar is exported.\n * @param onUserAuthorized A callback that is called when a user is authorized.\n * @param onAssetUnlock A callback that is called when an asset unlock button is pressed in RPM.\n * @returns A React component.\n */\nconst AvatarCreator = ({ subdomain, className, style, config, onUserSet, onAvatarExported, onUserAuthorized, onAssetUnlock }) => {\n    const supportedEvents = {\n        'v1.avatar.exported': onAvatarExported,\n        'v1.user.set': onUserSet,\n        'v1.user.authorized': onUserAuthorized,\n        'v1.asset.unlock': onAssetUnlock,\n    };\n    const handleEvents = (event) => {\n        supportedEvents[event.eventName]?.(event);\n    };\n    return React.createElement(AvatarCreatorRaw, { subdomain: subdomain, className: className, style: style, config: config, onEventReceived: handleEvents });\n};\n\nexport { AvatarCreator, AvatarCreatorRaw };\n"],
  "mappings": ";;;;;;;;AAAA,mBAAkD;AAOlD,IAAM,eAAe,CAAC,eAAe;AACjC,MAAI;AACA,WAAO,KAAK,MAAM,UAAU;AAAA,EAChC,SACO,OAAO;AACV,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,sBAAsB,CAAC,WAAW,WAAW;AAC/C,aAAO,sBAAQ,MAAM;AACjB,QAAI,MAAM,WAAW,aAAa,MAAM;AACxC,QAAI,iCAAQ;AACR,aAAO,IAAI,OAAO,QAAQ;AAC9B,WAAO;AACP,QAAI,iCAAQ;AACR,aAAO;AACX,QAAI,iCAAQ;AACR,aAAO;AACX,QAAI,iCAAQ;AACR,aAAO,aAAa,iCAAQ,QAAQ;AACxC,WAAO;AAAA,EACX,GAAG,CAAC,WAAW,MAAM,CAAC;AAC1B;AAEA,IAAM,gBAAgB;AACtB,IAAM,aAAa;AACnB,IAAM,qBAAqB;AAU3B,IAAM,mBAAmB,CAAC,EAAE,WAAW,WAAW,OAAO,QAAQ,gBAAgB,MAAM;AACnF,QAAM,eAAW,qBAAO,IAAI;AAC5B,QAAM,MAAM,oBAAoB,WAAW,MAAM;AACjD,QAAM,iCAAiC,MAAM;AA/CjD;AAgDQ,QAAI,GAAC,cAAS,YAAT,mBAAkB;AACnB;AACJ,yBAAS,YAAT,mBAAkB,kBAAlB,mBAAiC,YAAY,KAAK,UAAU;AAAA,MACxD,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,WAAW;AAAA,IACf,CAAC,GAAG;AAAA,EACR;AACA,QAAM,YAAY,CAAC,UAAU;AACzB,UAAM,qBAAqB,aAAa,MAAM,IAAI;AAClD,SAAI,yDAAoB,YAAW;AAC/B;AACJ,SAAI,yDAAoB,eAAc,oBAAoB;AACtD,qCAA+B;AAC/B;AAAA,IACJ;AACA,uDAAkB;AAAA,EACtB;AACA,8BAAU,MAAM;AACZ,WAAO,iBAAiB,eAAe,SAAS;AAChD,WAAO,MAAM;AACT,aAAO,oBAAoB,eAAe,SAAS;AAAA,IACvD;AAAA,EACJ,GAAG,CAAC,CAAC;AACL,SAAO,aAAAA,QAAM,cAAc,UAAU,EAAE,OAAO,mBAAmB,KAAK,UAAU,KAAK,KAAK,OAAc,WAAsB,OAAO,4BAA4B,CAAC;AACtK;AAcA,IAAM,gBAAgB,CAAC,EAAE,WAAW,WAAW,OAAO,QAAQ,WAAW,kBAAkB,kBAAkB,cAAc,MAAM;AAC7H,QAAM,kBAAkB;AAAA,IACpB,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,sBAAsB;AAAA,IACtB,mBAAmB;AAAA,EACvB;AACA,QAAM,eAAe,CAAC,UAAU;AA9FpC;AA+FQ,0BAAgB,MAAM,eAAtB,yCAAmC;AAAA,EACvC;AACA,SAAO,aAAAA,QAAM,cAAc,kBAAkB,EAAE,WAAsB,WAAsB,OAAc,QAAgB,iBAAiB,aAAa,CAAC;AAC5J;",
  "names": ["React"]
}
